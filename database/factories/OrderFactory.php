<?php

namespace Database\Factories;

use App\Models\Order;
use App\Models\Customer;
use App\Models\Branch;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Order>
 */
class OrderFactory extends Factory
{
    protected $model = Order::class;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'order_number' => null, // Will be auto-generated by model
            'customer_id' => Customer::factory(),
            'branch_id' => Branch::factory(),
            'order_date' => $this->faker->dateTimeBetween('-1 year', 'now'),
            'total_amount' => 0, // Will be calculated after order items are created
        ];
    }

    /**
     * Create a recent order.
     */
    public function recent(): static
    {
        return $this->state(function (array $attributes) {
            return [
                'order_date' => $this->faker->dateTimeBetween('-1 month', 'now'),
            ];
        });
    }

    /**
     * Create an old order.
     */
    public function old(): static
    {
        return $this->state(function (array $attributes) {
            return [
                'order_date' => $this->faker->dateTimeBetween('-2 years', '-6 months'),
            ];
        });
    }

    /**
     * Create a large order.
     */
    public function large(): static
    {
        return $this->state(function (array $attributes) {
            return [
                'total_amount' => $this->faker->randomFloat(2, 1000, 10000),
            ];
        });
    }

    /**
     * Create an order for a specific customer.
     */
    public function forCustomer(Customer $customer): static
    {
        return $this->state(function (array $attributes) use ($customer) {
            return [
                'customer_id' => $customer->id,
            ];
        });
    }

    /**
     * Create an order for a specific branch.
     */
    public function forBranch(Branch $branch): static
    {
        return $this->state(function (array $attributes) use ($branch) {
            return [
                'branch_id' => $branch->id,
            ];
        });
    }
}